<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wololo</title>
    <link>http://chandrewz.github.io</link>
    <description>code, work, webdev</description>
    <atom:link href="http://chandrewz.github.io/blog/atom.xml" rel="self" type="application/rss+xml" />
    
       
    
       
        <item>
          <title>Downloading Large CSV FIles via HREF</title>
          <description><![CDATA[<p>I had a web application that parsed CSV files. After parsing, the CSV would be downloadable in a <code>href</code> tag. Small CSV files were fine. Once I started parsing large ones, downloading it resulted in <code>Failed - Network error</code>. I suspected that it is because of <code>href</code>&#39;s length limit.</p>
<p>The solution is to use a <a href="https://developer.mozilla.org/en/docs/Web/API/Blob">Blob</a>.</p>
<h4>Before</h4><pre><code class="language-javascript">var csvData = &#39;data:application/csv;charset=utf-8,&#39; + encodeURIComponent(unparsed);
$(&#39;#download&#39;).attr(&#39;href&#39;, csvData);
</code></pre>
<h4>After using Blob</h4><pre><code class="language-javascript">var csvData = new Blob([unparsed], { type: &#39;text/csv&#39; });
$(&#39;#download&#39;).attr(&#39;href&#39;, URL.createObjectURL(csvData));
</code></pre>
]]></description>
          <pubDate>Wed Aug 31 2016 19:00:00 GMT-0500 (CDT)</pubDate>
          <link>http://chandrewz.github.io/blog/[object Object]</link>
          <guid isPermaLink="true">http://chandrewz.github.io/blog/[object Object]</guid>
        </item>
      
    
       
        <item>
          <title>Laravel and Scheduled Jobs on Heroku</title>
          <description><![CDATA[<h4>Creating the Job</h4><p>First, I want to create a job that sends the email.</p>
<pre><code>php artisan make:job SendReminderEmail --sync
</code></pre><p>This command will generate a new class in the app/Jobs directory. <code>--sync</code> overwrites the default queue implmentation. Starting with Laravel 5.2, <code>make:job</code> defaults to queued jobs so whenever <code>dispatch()</code> is called, the job will end up in your queue. For my job, I didn&#39;t want it queued. I wanted it to run and be done.</p>
<p>Simple enough. My <code>handle()</code> method simply sends the email.</p>
<pre><code class="language-php">&lt;?php

namespace App\Jobs;

use App\User;
use App\Jobs\Job;
use Illuminate\Contracts\Mail\Mailer;

class SendReminderEmail extends Job
{

    protected $user;

    /**
     * Create a new job instance.
     *
     * @param  User $user
     * @return void
     */
    public function __construct(User $user)
    {
        $this-&gt;user = $user;
    }

    /**
     * Execute the job.
     *
     * @param  Mailer $mailer
     * @return void
     */
    public function handle(Mailer $mailer)
    {
        $mailer-&gt;send(&#39;emails.reminder&#39;, [&#39;user&#39; =&gt; $this-&gt;user], function ($m) {
            $m-&gt;to($this-&gt;user-&gt;email, &quot;$this-&gt;user-&gt;first $this-&gt;user-&gt;last&quot;)-&gt;subject(&#39;Hey, you haven\&#39;t finished your registration!&#39;);
        });
    }
}
</code></pre>
<h4>Create php artisan console command</h4><p>Now I want my scheduler to call this job every so often. The scheduler needs some way to run it, so I went created an artisan command that can be ran from the terminal.</p>
<pre><code>php artisan make:console SendEmails --command=emails:send
</code></pre><p>This generates a class at <code>app/Console/Commands/SendEmails.php</code>. The <code>--command</code> option assigns the terminal command name.</p>
<p><code>SendEmails</code> finds all users that need an email to be sent, and dispatches the <code>SendReminderEmail</code> job.</p>
<h4>Scheduler on Heroku</h4><p>Now to get the scheduler up on Heroku.</p>
<pre><code>heroku addons:create scheduler:standard
</code></pre><p>I logged into my app&#39;s Heroku dashboard. I set the frequency to every 10 minutes with the following command:</p>
<pre><code>php artisan emails:send
</code></pre><p>And to test if your artisan command is working properly:</p>
<pre><code>heroku run php artisan emails:send
</code></pre><p>I started seeing emails in my inbox, nice! Now for some fine tuning.</p>
]]></description>
          <pubDate>Wed May 25 2016 19:00:00 GMT-0500 (CDT)</pubDate>
          <link>http://chandrewz.github.io/blog/[object Object]</link>
          <guid isPermaLink="true">http://chandrewz.github.io/blog/[object Object]</guid>
        </item>
      
    
       
        <item>
          <title>Some AWS EC2 Commands</title>
          <description><![CDATA[<p>A few AWS EC2 commands I need to remember.</p>
<h4>SSH into an EC2 server</h4><pre><code>ssh -i ~/.ssh/aws-first.pem ec2-user@ec2-52-40-3-169.us-west-2.compute.amazonaws.com
</code></pre><h4>Create a new instance</h4><p>XXX is the ID of the image.</p>
<pre><code>aws ec2 run-instances --image-id ami-XXX --instance-type t2.micro
</code></pre>]]></description>
          <pubDate>Mon May 16 2016 19:00:00 GMT-0500 (CDT)</pubDate>
          <link>http://chandrewz.github.io/blog/[object Object]</link>
          <guid isPermaLink="true">http://chandrewz.github.io/blog/[object Object]</guid>
        </item>
      
    
       
        <item>
          <title>Authentication with Vue Router</title>
          <description><![CDATA[<p>I&#39;ve been working with <a href="https://vuejs.org/">Vue.js</a> for a project for about a month now, and it&#39;s pretty fun! I was searching up how to handle authentication with <a href="http://router.vuejs.org/en/">vue-router</a> and there weren&#39;t too many resources. I originally had a parent function that handled redirects upon <code>ready()</code>, but there are a few problems:</p>
<ol>
<li>Too many one-liners. I have to call the function each time in many views.</li>
<li>You see a &quot;flash&quot; of the the dashboard before being redirected the the login page because <code>ready()</code> fires the redirect after part of the rendering is done.</li>
</ol>
<p>So I knew I had to do it better.</p>
<p>Ryan Chenkie wrote a tutorial on authentication: <a href="https://auth0.com/blog/2015/11/13/build-an-app-with-vuejs/">Build an App with Vue.js: From Authentication to Calling an API</a>. It helped me get started but I ended up doing things a bit differently. He uses vue-router&#39;s <code>canActivate</code> hook and injects it in his <code>.vue</code> file. I noticed in vue-router&#39;s documentation, there are custom fields which can be used for authentication. So I wanted to take advantage of <code>beforeEach</code> like the documentation does in its example.</p>
<h4>Write an auth service</h4><p>I had my login/logout functions in my .vue files originally, so the login code was in <code>Login.vue</code> and not accessible to my vue-router. It&#39;d make sense to extract the authentication service out so it can be accessed by both the router and the Vue object. I prefer to keep my <code>user</code> object in my <code>$root</code>.</p>
<p><code>/services/auth.js</code></p>
<pre><code class="language-javascript">import {router} from &#39;../app.js&#39;

export default {

    // authentication status
    authenticated: false,

    // Send a request to the login URL and save the returned JWT
    login(context, creds, redirect) {
        context.$http.post(&#39;/api/login&#39;, creds, (data) =&gt; {
            localStorage.setItem(&#39;user&#39;, JSON.stringify(data))

            this.authenticated = true
            context.$root.user = data

            // Redirect to a specified route
            if (redirect) {
                router.go(redirect)
            }

        }).error((errors) =&gt; {
            context.errors = errors;
        })
    },

    // To log out
    logout: function() {
        localStorage.removeItem(&#39;user&#39;);
        this.authenticated = false;
        router.go(&#39;/login&#39;)
    }
}
</code></pre>
<h4>Use a custom field <code>auth</code> and check authentication using <code>beforeEach</code></h4><p>I add an <code>auth: true</code> to the root route of my application, so all my app routes are now &quot;authed&quot; :) When a nested route is matched, all custom fields will be merged on to the same <code>$route</code> object. When a sub route and a parent route has the same custom field, the sub route&#39;s value will overwrite the parent&#39;s.</p>
<p>A condensed version of my <code>app.js</code> - hopefully it provides an example of how your router, auth service, and root Vue object should interact.</p>
<pre><code class="language-javascript">
export var router = new VueRouter();

router.map({
    &#39;/&#39;: {
        component: require(&#39;./views/App.vue&#39;),
        subRoutes: {
            &#39;/&#39;: {
                component: require(&#39;./views/Dashboard.vue&#39;),
                name: &#39;Dashboard&#39;
            },
            &#39;settings&#39;: {
                component: require(&#39;./views/settings/Settings.vue&#39;),
                name: &#39;Settings&#39;
            },
        },
        auth: true
    },
    &#39;login&#39;: {
        component: require(&#39;./views/Login.vue&#39;)
    }
});

// authentication service
import Auth from &#39;./services/auth.js&#39;;

router.beforeEach(function (transition) {
    if (transition.to.auth &amp;&amp; !Auth.authenticated) {
        // if route requires auth and user isn&#39;t authenticated
        transition.redirect(&#39;/login&#39;)
    } else {
        transition.next()
    }
})

router.start(Vue.extend({
    data: function() {
        return { user: {} };
    },
    computed: {
        auth: function() {
            return Auth;
        }
    },
    methods: {
        checkLocalStorage: function() {
            if (localStorage.user) {
                this.user = JSON.parse(localStorage.user);
                Vue.http.headers.common[&#39;Authorization&#39;] = &#39;Bearer &#39; + this.user.api_token;
                Auth.authenticated = true;
            }
        },
        logout: function() {
            this.user = {};
            Auth.logout();
        }
    },
    ready: function() {
        this.checkLocalStorage();
    }
}), &#39;#app&#39;);
</code></pre>
]]></description>
          <pubDate>Wed May 11 2016 19:00:00 GMT-0500 (CDT)</pubDate>
          <link>http://chandrewz.github.io/blog/[object Object]</link>
          <guid isPermaLink="true">http://chandrewz.github.io/blog/[object Object]</guid>
        </item>
      
    
       
        <item>
          <title>Set up and run Selenium on CentOS</title>
          <description><![CDATA[<p>Getting Selenium + Chrome + CentOS up was a nightmare. I give up on Chrome and  ChromeDriver on CentOS. I had Selenium and Chrome working locally on my Mac, but the exact steps do not rollover. After hours, I switched over to Firefox and it worked in 5 minutes. No additional driver needed either.</p>
<p>Here&#39;s my steps for running Selenium WebDriver in PHP on CentOS 7, using <strong><em>Firefox</em></strong>. I had a fresh server with nothing installed. You&#39;ll want to check out the repo (<a href="https://github.com/facebook/php-webdriver">facebook/php-webdriver</a>) and get things running locally before proceeding.</p>
<h3>Check version of CentOS</h3><p>I used an older server running CentOS 5 and ran into complications, so I made sure I was on CentOS 7.</p>
<pre><code>$ cat /etc/redhat-release
CentOS Linux release 7.2.1511 (Core)
</code></pre><h3>Install Java &amp; PHP on CentOS</h3><p>Skip this if Java and PHP are installed. Make sure you have root privileges as well.</p>
<h4>Java</h4><pre><code>$ yum install java-1.7.0-openjdk-devel
</code></pre><p>The <code>java</code> command should be available.</p>
<pre><code>$ java -version
java version &quot;1.7.0_101&quot;
OpenJDK Runtime Environment (rhel-2.6.6.1.el7_2-x86_64 u101-b00)
OpenJDK 64-Bit Server VM (build 24.95-b01, mixed mode)
</code></pre><h4>PHP</h4><pre><code>$ yum install php
</code></pre><h3>Install Firefox on CentOS</h3><p>I read so many articles on Selnium and CentOS, but this gist saved the day: <a href="https://gist.github.com/textarcana/5855427">https://gist.github.com/textarcana/5855427</a></p>
<pre><code>$ yum -y install firefox Xvfb libXfont Xorg
$ yum -y groupinstall &quot;X Window System&quot; &quot;Desktop&quot; &quot;Fonts&quot; &quot;General Purpose Desktop&quot;
</code></pre><p>Launch an XWindows Virtual Frame Buffer(XVFB) session on display port 99:</p>
<pre><code>$ Xvfb :99 -ac -screen 0 1280x1024x24 &amp;
</code></pre><p>Tell all XWindows applications in this terminal session to use the new Xvfb display port:</p>
<pre><code>$ export DISPLAY=:99
</code></pre><h3>Download Selenium Server</h3><p>You&#39;re looking for the Selenium server as <code>selenium-server-standalone-#.jar</code> provided here: <a href="http://selenium-release.storage.googleapis.com/index.html">http://selenium-release.storage.googleapis.com/index.html</a>. I&#39;m using <code>selenium-server-standalone-2.53.0.jar</code>.</p>
<h4>Run it as a background process</h4><p>The importance is <code>nuhup</code> and <code>&amp;</code> to run a process in the background on Linux.</p>
<pre><code>nohup java -jar selenium-server-standalone-2.53.0.jar &amp;
</code></pre><h4>Kill the process</h4><p>TIL: If you want to kill the process, use <code>ps</code> to view running processes.</p>
<pre><code>$ ps
  PID TTY          TIME CMD
 5260 pts/1    00:00:00 bash
 5527 pts/1    00:00:00 java
 5550 pts/1    00:00:00 ps
</code></pre><p>And to terminate:</p>
<pre><code>$ kill 5527
</code></pre><h3>Run a test</h3><p>Make sure libraries have been moved over or installed properly to the server. </p>
<pre><code>$ wget https://raw.githubusercontent.com/facebook/php-webdriver/community/example.php
$ php example.php
</code></pre><p>Finally. I can begin running my test cases.</p>
]]></description>
          <pubDate>Sat May 07 2016 19:00:00 GMT-0500 (CDT)</pubDate>
          <link>http://chandrewz.github.io/blog/[object Object]</link>
          <guid isPermaLink="true">http://chandrewz.github.io/blog/[object Object]</guid>
        </item>
      
    
       
        <item>
          <title>Start a blog with Harp</title>
          <description><![CDATA[<p>I had <a href="http://chandrewz.github.io">chandrewz.github.io</a> up for a while with nothing on it. I decided to put up a blog and I&#39;d write down things I google at work and TIL&#39;s. I was considering Pelican before stumbling upon Harp.js. I found Harp&#39;s installation process much easier and that converted me.</p>
<h3>Installing Harp (make sure <code>npm</code> is installed)</h3><pre><code class="language-bash">sudo npm install -g harp
</code></pre>
<h3>Initiate a harp project (using Boilerplate)</h3><p>Yeah, you can use <code>harp init</code> by itself, but I wanted something up quickly. I also had my blog repo, so I <code>cd</code>&#39;ed in there. I used the <a href="https://github.com/kennethormandy/hb-simurai">Simurai</a> boilerplate.</p>
<p>For a full list of templates, see: <a href="https://github.com/harp-boilerplates/registry/blob/master/index.json">https://github.com/harp-boilerplates/registry/blob/master/index.json</a></p>
<pre><code class="language-bash">harp init --boilerplate kennethormandy/hb-simurai _harp
</code></pre>
<p>That imports all the boilerplate files into the <code>_harp</code> directory.</p>
<h3>Compile &amp; Serve</h3><p>From my project directory:</p>
<pre><code class="language-bash">harp compile _harp ./
harp server
</code></pre>
<p>I&#39;m compiling the <code>_harp</code> directory and generating the static content into the root directory of my project. The generated website can be accessed on <a href="http://localhost:9000">localhost:9000</a>.</p>
<h3>Push it live</h3><pre><code class="language-bash">git push origin master
</code></pre>
<p>And we&#39;re done.</p>
]]></description>
          <pubDate>Fri May 06 2016 19:00:00 GMT-0500 (CDT)</pubDate>
          <link>http://chandrewz.github.io/blog/[object Object]</link>
          <guid isPermaLink="true">http://chandrewz.github.io/blog/[object Object]</guid>
        </item>
      
    
       
        <item>
          <title>Heyo World</title>
          <description><![CDATA[<p>Hi. Let’s make a simple blog with <a href="http://harpjs.com">Harp</a>.</p>
]]></description>
          <pubDate>Thu May 05 2016 19:00:00 GMT-0500 (CDT)</pubDate>
          <link>http://chandrewz.github.io/blog/[object Object]</link>
          <guid isPermaLink="true">http://chandrewz.github.io/blog/[object Object]</guid>
        </item>
      
    
  </channel>
</rss>
